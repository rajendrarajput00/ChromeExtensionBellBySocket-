(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{13:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),l=r.a.forwardRef((function(e,t){var n=e.type,a=e.placeholder,l=e.value,o=e.onChange,i=e.name,c=e.className;return r.a.createElement("input",{type:n,placeholder:a,value:l,onChange:function(e){return o(e.target.value)},name:i,className:c,ref:t})})),o=function(e){var t=e.name,n=e.value,a=e.onChange,l=e.options,o=e.className;return r.a.createElement("select",{name:t,value:n,onChange:function(e){return a(e.target.value)},className:o},l.map((function(e,t){return r.a.createElement("option",{value:e,key:t},e)})))},i=function(e){var t=e.value,n=e.onClick,a=e.name,l=e.className;return r.a.createElement("button",{onClick:n,name:a,className:l},t)},c=function(e,t){console.log(e,t)},u=Object(a.forwardRef)((function(e,t){var n=e.inputPlaceHolder,a=e.inputValue,i=e.inputOnchange,c=e.selectValue,u=e.selectOnchange;return r.a.createElement("div",{className:"inputSelect",ref:t},r.a.createElement(l,{type:"number",placeholder:n,name:"minsecTime",value:a,onChange:i}),r.a.createElement(o,{name:"minsec",options:["s","m"],value:c,onChange:u}))}));function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var a,r,l=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(a=n.next()).done)&&(l.push(a.value),!t||l.length!==t);o=!0);}catch(e){i=!0,r=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw r}}return l}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}var f=function(){var e=s(Object(a.useState)(""),2),t=e[0],n=e[1],m=s(Object(a.useState)("Today"),2),f=m[0],g=m[1],d=s(Object(a.useState)(""),2),v=d[0],p=d[1],y=s(Object(a.useState)(""),2),h=y[0],b=y[1],w=s(Object(a.useState)("s"),2),N=w[0],O=w[1],S=s(Object(a.useState)(!1),2),E=S[0],T=S[1],A=r.a.createRef(),k=r.a.createRef(),j={taskFieldRef:A,timeFieldRef:k};return r.a.createElement("div",{className:"scheduleAlarmContainer"},r.a.createElement(l,{type:"text",placeholder:"Task",name:"task",value:t,onChange:n,ref:A,className:"taskInputField"}),r.a.createElement(o,{name:"day",options:["Today","Tomorrow","Recurring"],value:f,onChange:g,className:"daySelect"}),"Recurring"===f?r.a.createElement(u,{inputValue:h,inputOnchange:b,inputPlaceHolder:"Time",selectValue:N,selectOnchange:O,ref:k}):r.a.createElement(l,{type:"time",name:"time",value:v,onChange:p,className:"inputTime",ref:k}),E?r.a.createElement("div",{className:"warningMessage"},"Time should be greater than 5 Seconds"):r.a.createElement("div",{className:"warningMessage"}),r.a.createElement(i,{name:"setAlarmButton",value:"Set Alarm",className:"setAlarmButton",onClick:function(){if(console.log("inputValue, selectValue",h,N),"Today"===f||"Tomorrow"===f){if(!t||!v){var e={taskFieldRef:t,timeFieldRef:v};return Object.keys(e).map((function(t){if(!e[t]){var n=j[t].current.className.split(" ");n.indexOf("warning-vibration-animation")>=0?(n[n.indexOf("warning-vibration-animation")]="warning-vibration-animation-toggle",c("classArray",n),j[t].current.className="".concat(n.join(" "))):n.indexOf("warning-vibration-animation-toggle")>=0?(n[n.indexOf("warning-vibration-animation-toggle")]="warning-vibration-animation",c("classArray",n),j[t].current.className="".concat(n.join(" "))):j[t].current.className="".concat(n.join(" ")," warning-vibration-animation")}})),void setTimeout((function(){A.current.className="taskInputField",k.current.className="inputTime",console.log("Removed")}),1e3)}if("Today"===f){var n=String(new Date);if(n=n.slice(0,n.indexOf((new Date).getFullYear())+5)+v+":00 "+n.slice(n.indexOf("GMT")),console.log("stringNewDate",n),new Date(n).getTime()<(new Date).getTime())return void console.log("Dfdsfdsfdsfdsf")}}else if("Recurring"===f){if(console.log("timeFieldRef.current",k.current),!t)return A.current.className="taskInputField warning-vibration-animation",void setTimeout((function(){A.current.className="taskInputField",console.log("Removed")}),1e3);if(!h)return k.current.className="inputSelect warning-vibration-animation",void setTimeout((function(){k.current.className="inputSelect",console.log("Removed")}),1e3);if(h<5&&"s"===N)return T(!0),void setTimeout((function(){T(!1)}),2e3)}switch(f){case"Today":var a=String(new Date);a=a.slice(0,a.indexOf((new Date).getFullYear())+5)+v+":00 "+a.slice(a.indexOf("GMT")),console.log("newDate",a),chrome.alarms.create(t,{when:new Date(a).getTime()});break;case"Tomorrow":var r=String(new Date(Date.now()+864e5));r=r.slice(0,r.indexOf((new Date).getFullYear())+5)+v+":00 "+r.slice(r.indexOf("GMT")),console.log("nextDayDate",r),chrome.alarms.create(t,{when:new Date(r).getTime()});break;case"Recurring":"m"===N?chrome.alarms.create(t,{periodInMinutes:Number(h)}):chrome.alarms.create(t,{periodInMinutes:h/60})}var l;(l=document.getElementById("snackbar")).className="show",setTimeout((function(){l.className=l.className.replace("show","")}),3e3)}}))},g=function(e){var t=e.links,n=e.className,a=e.onClick,l=e.active;return r.a.createElement("div",{className:n},function(e,t,n){return e.map((function(e,a){return r.a.createElement("span",{key:a,onClick:function(a){a.preventDefault(),t("|"===e?n:e)},className:n===e?"activeBottomNav":""},e)}))}(t,a,l))};function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var a,r,l=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(a=n.next()).done)&&(l.push(a.value),!t||l.length!==t);o=!0);}catch(e){i=!0,r=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw r}}return l}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return v(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return v(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}var p=function(){var e=d(Object(a.useState)([]),2),t=e[0],n=e[1];Object(a.useEffect)((function(){return console.log("IN COMPONENT DID MOUNT")})),chrome.alarms.getAll((function(e){console.log("lalarms",e),JSON.stringify(e)!=JSON.stringify(t)&&n(e)}));return r.a.createElement("div",{className:"tasks-container"},r.a.createElement("ul",null,t.length?t.map((function(e,a){var l=e.scheduledTime,o=String(new Date(l));return r.a.createElement(r.a.Fragment,null,r.a.createElement("li",{key:a},e.name," at ",o.slice(o.indexOf((new Date).getFullYear())+5,o.indexOf("GMT")-1),r.a.createElement("img",{src:"../delete.svg",onClick:function(a){var r;a.preventDefault(),r=e.name,t.length&&(n(t.filter((function(e){return e.name!==r}))),chrome.alarms.clear(r))},className:"cross-button"})))})):""))},y=n(28);function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null==n)return;var a,r,l=[],o=!0,i=!1;try{for(n=n.call(e);!(o=(a=n.next()).done)&&(l.push(a.value),!t||l.length!==t);o=!0);}catch(e){i=!0,r=e}finally{try{o||null==n.return||n.return()}finally{if(i)throw r}}return l}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return b(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return b(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}t.default=function(){var e=h(Object(a.useState)("Set Alarm"),2),t=e[0],n=e[1];return console.log("showAlarmsList",t),Object(a.useEffect)((function(){console.log("ggggggggggggggggggggggggggggggggg");var e=Object(y.a)("http://127.0.0.1:4000");console.log("BBBBBBBBBBBBBBB",e),e.on("FromAPI",(function(e){console.log("Dataatatatat",e),console.log("time",e.time),chrome.alarms.create("Reminder pl start your tracker",{periodInMinutes:e.time/60})}))}),[]),r.a.createElement("div",{className:"container"},"Set Alarm"===t?r.a.createElement(f,null):r.a.createElement(p,null),r.a.createElement(g,{links:["Set Alarm","|","Show Tasks"],className:"bottomNavigation",onClick:n,active:t}),r.a.createElement("div",{id:"snackbar"},"Alarm set"))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,